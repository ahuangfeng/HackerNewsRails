info:
  description: "This is the API documentation for our Hacker News"
  version: 0.0.1
  title: "Hacker News - G11D"
swagger: '2.0'
consumes:
  - application/json
produces:
  - application/xml
  - application/json
  - application/octet-stream
  - text/plain
externalDocs:
  description: "Bitbucket repository"
  url: "https://bitbucket.org/ahuangfeng/g11d_hackernews/"
host: g11d-hackernews.herokuapp.com 
basePath: "/api/v1"
tags:
  - name: Contributions
    description: "All Contributions REST calls"
  - name: Comments
    description: "All Comments REST calls"
  - name: Users
    description: "All Users REST calls"
schemes:
- "http"
- "https"
paths:
  /contributions:
    get:
      tags:
      - Contributions
      summary: "Return all the contributions. They can be filtered"
      operationId: getAllContributions
      produces:
      - application/json
      parameters:
      - in: query
        name: type
        required: false
        type: string
        enum: [ask, new]
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: '#/definitions/Contribution'
        400:
          description: "Bad Request"
        401:
          description: "Not authorized"
      security:
      - api_key: []
    post:
      tags:
      - Contributions
      summary: "Create a new contribution"
      operationId: createContribution
      produces:
      - application/json
      parameters:
      - name: body
        in: body
        schema:
          $ref: "#/definitions/ContributionBody"
      responses:
        201:
          description: "Successfully created"
          schema:
            $ref: '#/definitions/Contribution'
        400:
          description: "Bad Request"
        401:
          description: "Not authorized"
        409:
          description: "Conflict"
      security:
      - api_key: []
  /contributions/{id}:
    get:
      tags:
      - Contributions
      summary: "Return a contribution"
      operationId: getContributionById
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        type: string
        required: true
        description: Id of the Contribution
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: '#/definitions/Contribution'
        401:
          description: "Not authorized"
        404:
          description: "Contribution not found"
      security:
      - api_key: []
    put:
      tags:
      - Contributions
      summary: "Update a contribution"
      operationId: updateContribution
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        type: string
        required: true
        description: Id of the Contribution
      - name: body
        in: body
        schema:
          $ref: "#/definitions/UpdateContributionBody"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: '#/definitions/Contribution'
        401:
          description: "Not authorized"
        403:
          description: "Forbidden"
        404:
          description: "Contribution not found"
      security:
      - api_key: []
    delete:
      tags:
      - Contributions
      summary: "Delete a contribution"
      operationId: deleteContribution
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        type: string
        required: true
        description: Id of the Contribution
      responses:
        200:
          description: "Successful operation"
        401:
          description: "Not authorized"
        403:
          description: "Forbidden"
        404:
          description: "Contribution not found"
      security:
      - api_key: []
  /contributions/{id}/vote:
    post:
      tags:
      - Contributions
      summary: "Vote a contribution"
      operationId: voteContribution
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        type: string
        required: true
        description: Id of the contribution
      responses:
        200:
          description: "Successful operation"
        401:
          description: "Not authorized"
        404:
          description: "Contribution not found"
        409:
          description: "Conflict"
      security:
      - api_key: []
  /contributions/{id}/unvote:
    post:
      tags:
      - Contributions
      summary: "Unvote a contribution"
      operationId: unvoteContribution
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        type: string
        required: true
        description: Id of the contribution
      responses:
        200:
          description: "Successful operation"
        401:
          description: "Not authorized"
        404:
          description: "Contribution not found"
        409:
          description: "Conflict"
      security:
      - api_key: []
  /users:
    post:
      tags:
      - Users
      summary: "Creates a user"
      operationId: createUser
      produces:
      - application/json
      parameters:
      - name: body
        in: body
        schema:
          $ref: "#/definitions/CreateUserBody"
      responses:
        201:
          description: "Successful operation"
          schema:
            $ref: '#/definitions/User'
        400:
          description: "Bad request"
        401:
          description: "Not authorized"
        404:
          description: "User not found"
        409:
          description: "Conflict"
  /users/{id}:
    get:
      tags:
      - Users
      summary: "Return a user"
      operationId: getUser
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        type: string
        required: true
        description: Id of the Users
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: '#/definitions/User'
        401:
          description: "Not authorized"
        404:
          description: "User not found"
      security:
      - api_key: []
    put:
      tags:
      - Users
      summary: "Update a user"
      operationId: updateUser
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        type: string
        required: true
        description: Id of the User
      - name: body
        in: body
        schema:
          $ref: "#/definitions/UpdateUserBody"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: '#/definitions/User'
        401:
          description: "Not authorized"
        403:
          description: "Forbidden"
        404:
          description: "User not found"
      security:
      - api_key: []
    delete:
      tags:
      - Users
      summary: "Delete a user and all its data"
      operationId: deleteUser
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        type: string
        required: true
        description: Id of the User
      responses:
        200:
          description: "Successful operation"
        401:
          description: "Not authorized"
        403:
          description: "Forbidden"
        404:
          description: "User not found"
      security:
      - api_key: []
  /users/{id}/comments:
    get:
      tags:
      - Users
      summary: "Return all the comments and replies of a user"
      operationId: getCommentsUser
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        type: string
        required: true
        description: Id of the Users
      responses:
        200:
          description: "Successful operation"
        401:
          description: "Not authorized"
        403:
          description: "Forbidden"
        404:
          description: "User not found"
      security:
      - api_key: []
  /contributions/{contribution_id}/comments:
    get:
      tags:
      - Comments
      summary: "Return all the comments"
      operationId: getCommetsfromContributions
      produces:
      - application/json
      parameters:
      - name: contribution_id
        in: path
        type: string
        required: true
        description: Id of the Contribution
      responses:
        200:
          description: "Successful operation"
          schema:
              $ref: "#/definitions/Comment"
        401:
          description: "Not authorized"
        404:
          description: "Contribution not found"
      security:
      - api_key: []
    post:
      tags:
      - Comments
      summary: "Create a new comment"
      operationId: createComment
      produces:
      - application/json
      parameters:
      - name: contribution_id
        in: path
        type: string
        required: true
        description: Id of the Contribution
      - name: body
        in: body
        schema:
          $ref: "#/definitions/CommentBody"
      responses:
        201:
          description: "Successfully created"
          schema:
            $ref: '#/definitions/Comment'
        400:
          description: "Bad request"
        401:
          description: "Not authorized"
        404:
          description: "Contribution not found"
      security:
      - api_key: []
  /contributions/{contribution_id}/comments/{id}:
    get:
      tags:
      - Comments
      summary: "Return a comment"
      operationId: getCommetfromContribution
      produces:
      - application/json
      parameters:
      - name: contribution_id
        in: path
        type: string
        required: true
        description: Id of the Contribution
      - name: id
        in: path
        type: string
        required: true
        description: Id of the Comment
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Comment"
        401:
          description: "Not authorized"
        404:
          description: "Contribution/Comment not found"
      security:
      - api_key: []
    put:
      tags:
      - Comments
      summary: "Update a comment"
      operationId: updateComment
      produces:
      - application/json
      parameters:
      - name: contribution_id
        in: path
        type: string
        required: true
        description: Id of the Contribution
      - name: id
        in: path
        type: string
        required: true
        description: Id of the Comment
      - name: body
        in: body
        schema:
          $ref: "#/definitions/UpdateCommentBody"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: '#/definitions/Comment'
        401:
          description: "Not authorized"
        403:
          description: "Forbidden"
        404:
          description: "Contribution/Comment not found"
      security:
      - api_key: []
    delete:
      tags:
      - Comments
      summary: "Delete a comment"
      operationId: deleteComment
      produces:
      - application/json
      parameters:
      - name: contribution_id
        in: path
        type: string
        required: true
        description: Id of the Contribution
      - name: id
        in: path
        type: string
        required: true
        description: Id of the Comment
      responses:
        200:
          description: "Successful operation"
        401:
          description: "Not authorized"
        403:
          description: "Forbidden"
        404:
          description: "Contribution/Comment not found"
      security:
      - api_key: []
  /contributions/{contribution_id}/comments/{id}/reply:
    post:
      tags:
      - Comments
      summary: "Create a new reply"
      operationId: createReply
      produces:
      - application/json
      parameters:
      - name: contribution_id
        in: path
        type: string
        required: true
        description: Id of the Contribution
      - name: id
        in: path
        type: string
        required: true
        description: Id of the Comment
      - name: body
        in: body
        schema:
          $ref: "#/definitions/CommentBody"
      responses:
        201:
          description: "Successfully created"
          schema:
            $ref: '#/definitions/Comment'
        400:
          description: "Bad Request"
        401:
          description: "Not authorized"
        404:
          description: "Contribution/Comment not found"
      security:
      - api_key: []
  /contributions/{contribution_id}/comments/{id}/vote:
    post:
      tags:
      - Comments
      summary: "Vote a comment"
      operationId: voteComment
      produces:
      - application/json
      parameters:
      - name: contribution_id
        in: path
        type: string
        required: true
        description: Id of the contribution
      - name: id
        in: path
        type: string
        required: true
        description: Id of the comment
      responses:
        200:
          description: "Successful operation"
        401:
          description: "Not authorized"
        404:
          description: "Contribution/Comment not found"
        409:
          description: "Conflict"
      security:
      - api_key: []
  /contributions/{contribution_id}/comments/{id}/unvote:
    post:
      tags:
      - Comments
      summary: "Unvote a comment"
      operationId: unvoteComment
      produces:
      - application/json
      parameters:
      - name: contribution_id
        in: path
        type: string
        required: true
        description: Id of the contribution
      - name: id
        in: path
        type: string
        required: true
        description: Id of the comment
      responses:
        200:
          description: "Successful operation"
        401:
          description: "Not authorized"
        404:
          description: "Contribution/Comment not found"
        409:
          description: "Conflict"
      security:
      - api_key: []
  
securityDefinitions:
  api_key:
    type: apiKey
    name: Authorization
    in: header
definitions:
  ContributionBody:
    type: "object"
    properties:
      title:
        type: "string"
        example: "Google"
      url:
        type: "string"
      text:
        type: "string"
    example:
      title: Google
      url: https://www.google.com
  CommentBody:
    type: "object"
    properties:
      body:
        type: "string"
    example:
      body: hola :D
  CreateUserBody:
    type: "object"
    properties:
      name:
        type: "string"
      email:
        type: "string"
      about:
        type: "string"
    example:
      name: pep
      email: pep@gmail.com
      about: hola!
  UpdateContributionBody:
    type: "object"
    properties:
      title:
        type: "string"
      url:
        type: "string"
      text:
        type: "string"
    example:
      text: he canviat el text
  UpdateUserBody:
    type: "object"
    properties:
      email:
        type: "string"
      about:
        type: "string"
    example:
      email: pep@gmail.com
      about: hola!
  UpdateCommentBody:
    type: "object"
    properties:
      body:
        type: "string"
    example:
      body: vull canviar el body del meu comment
  Contribution:
    type: "object"
    properties:
      id:
        type: "number"
      title:
        type: "string"
      url:
        type: "string"
      text:
        type: "string"
      username:
        type: "string"
      createdAt:
        type: "string"
      numComments:
        type: "number"
        default: 0
      points:
        type: "number"
    xml:
      name: "Contribution"
    example:
      id: 1
      title: "Ask HN: Teniu examen?"
      url: "null"
      text: ups
      username: pep
      createdAt: 2 days ago
      numComments: 2
      points: 1
  User:
    type: "object"
    properties:
      id:
        type: "number"
      name:
        type: "string"
      about:
        type: "string"
      createdAt:
        type: "string"
      api-key:
        type: "string"
      email:
        type: "string"
    example:
      id: 1
      name: pep
      about: hola!
      createdAt: 2 days ago
      api-key: 18fcc59cc21af05e1f4bdaee41eda0e0
      email: pep@gmail.com
  Comment: 
    type: "object"
    properties:
      id:
        type: "number"
      points: 
        type: "number"
      username:
        type: "string"
      createdAt:
        type: "string"
      body:
        type: "string"
      parent_id:
        type: "number"
      contribution_id:
        type: "number"
    example:
        id: 3
        points: 0
        username: pep
        createdAt: 2 days ago
        body: hola :D
        parent_id: 2
        contribution_id: 1